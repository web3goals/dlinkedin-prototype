/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Chat {
  export type ConversationStruct = {
    accountOne: AddressLike;
    accountTwo: AddressLike;
    time: BigNumberish;
  };

  export type ConversationStructOutput = [
    accountOne: string,
    accountTwo: string,
    time: bigint
  ] & { accountOne: string; accountTwo: string; time: bigint };

  export type MessageStruct = {
    author: AddressLike;
    time: BigNumberish;
    extraData: string;
  };

  export type MessageStructOutput = [
    author: string,
    time: bigint,
    extraData: string
  ] & { author: string; time: bigint; extraData: string };
}

export interface ChatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConversation"
      | "getConversationIds"
      | "getMessages"
      | "getNextConversationId"
      | "postMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getConversation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConversationIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextConversationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postMessage",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getConversation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConversationIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextConversationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postMessage",
    data: BytesLike
  ): Result;
}

export interface Chat extends BaseContract {
  connect(runner?: ContractRunner | null): Chat;
  waitForDeployment(): Promise<this>;

  interface: ChatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConversation: TypedContractMethod<
    [conversationIds: BigNumberish],
    [Chat.ConversationStructOutput],
    "view"
  >;

  getConversationIds: TypedContractMethod<[], [bigint[]], "view">;

  getMessages: TypedContractMethod<
    [conversationId: BigNumberish],
    [Chat.MessageStructOutput[]],
    "view"
  >;

  getNextConversationId: TypedContractMethod<[], [bigint], "view">;

  postMessage: TypedContractMethod<
    [recepient: AddressLike, extraData: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConversation"
  ): TypedContractMethod<
    [conversationIds: BigNumberish],
    [Chat.ConversationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConversationIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMessages"
  ): TypedContractMethod<
    [conversationId: BigNumberish],
    [Chat.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextConversationId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "postMessage"
  ): TypedContractMethod<
    [recepient: AddressLike, extraData: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
